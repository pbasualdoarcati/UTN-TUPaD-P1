## 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario

def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)
    
def mostrar_factoriales_hasta(n):
    for i in range(1, n + 1):
        print(f"El factorial de {i} es {factorial(i)}")
        
def main():
        numero = int(input("Ingrese un n√∫mero entero positivo: "))
        if numero < 1:
            print("Por favor, ingrese un n√∫mero mayor o igual a 1.")
            return
        mostrar_factoriales_hasta(numero)

if __name__ == "__main__":
    main()


## 2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.
def fibonacci(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)
    
def mostrar_fibonacci_hasta(n):
    for i in range(n):
        print(f"Fibonacci en la posici√≥n {i} es {fibonacci(i)}")
        
def main_fibonacci():
        numero = int(input("Ingrese un n√∫mero entero positivo para la serie de Fibonacci: "))
        if numero < 0:
            print("Por favor, ingrese un n√∫mero mayor o igual a 0.")
            return
        mostrar_fibonacci_hasta(numero)

if __name__ == "__main__":
    main_fibonacci()
    
## 3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõùëö= ùëõ‚àóùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.

def potencia(base, exponente):
    if exponente == 0:
        return 1
    elif exponente < 0:
        return 1 / potencia(base, -exponente)
    else:
        return base * potencia(base, exponente - 1)
    
def main_potencia():
        base = float(input("Ingrese la base: "))
        exponente = int(input("Ingrese el exponente (entero): "))
        resultado = potencia(base, exponente)
        print(f"{base} elevado a {exponente} es {resultado}")

if __name__ == "__main__":
    main_potencia()
    
## 4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva su representaci√≥n en binario como una cadena de texto.

def decimal_a_binario(n):
    if n == 0:
        return "0"
    elif n == 1:
        return "1"
    else:
        return decimal_a_binario(n // 2) + str(n % 2)
    
def main_decimal_a_binario():
        numero = int(input("Ingrese un n√∫mero entero positivo en base decimal: "))
        if numero < 0:
            print("Por favor, ingrese un n√∫mero mayor o igual a 0.")
            return
        resultado = decimal_a_binario(numero)
        print(f"La representaci√≥n en binario de {numero} es {resultado}")
 
if __name__ == "__main__":
    main_decimal_a_binario()